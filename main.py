import telebot
import os
import keyboard
import crypter
import database
TOKEN = '6937610129:AAHvGN2EhxHy0uzlNAPdUcl4OAtPb0L4A60'
bot = telebot.TeleBot(TOKEN)

cryptkeylib = {}

@bot.message_handler(commands=['start','help'])
def start_message(message):
  with open('icons/hello.png', 'rb') as hello:
    bot.send_photo(message.chat.id, hello, caption="""
*KeyGuard* \- —É–¥–æ–±–Ω—ã–π –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏\! üòº

üö® –î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –Ω–∞–∂–∞–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ\.
""", reply_markup=keyboard.markupinfo, parse_mode='MarkdownV2')

@bot.message_handler(commands=['menu'])
def menu(message):
  with open('icons/menu.png', 'rb') as menu:
    bot.send_photo(message.chat.id, menu, caption="""
ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:*
""", reply_markup=keyboard.markup, parse_mode='MarkdownV2')
  if message.from_user.is_bot == True:
    bot.delete_message(message.chat.id, message.message_id)

def info(message):
  bot.delete_message(message.chat.id,message.message_id)
  with open('icons/info.png', 'rb') as info:
    bot.send_photo(message.chat.id, info, caption="""
‚öôÔ∏è *–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:*

 `1\.` –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π: *"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å"* –≤ –º–µ–Ω—é\. –ü–æ—Å–ª–µ —á–µ–≥–æ –ø–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–æ–¥–∏—Ç—å—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–µ—Ä–≤–∏—Å:–ø–∞—Ä–æ–ª—å, –ø–æ —Å–µ—Ä–≤–∏—Å—É –±—É–¥–µ—Ç –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –ø–æ–∏—Å–∫ –≤–∞—à–µ–≥–æ –ø–∞—Ä–æ–ª—è\.
                   
üö® –î–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã –≤–∞—à–∏—Ö –ø–∞—Ä–æ–ª–µ–π –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π: *"üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è"* –Ω–∏–∂–µ –ø–æ–¥ —ç—Ç–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ –ø–∞—Ä–æ–ª–∏ —Å –∫–ª—é—á–æ–º –¥–ª—è –±–æ–ª—å—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏\.
                   
 `2\.` –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è:
–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –æ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –≤–∞–º —Å–µ—Ä–≤–∏—Å–∞, —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –≤–∞–º–∏ –≤ –±–æ—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π: *"üïπÔ∏è –ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å"* –≤ –º–µ–Ω—é\. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Å–µ—Ä–≤–∏—Å –∏ –±–æ—Ç –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –ø–∞—Ä–æ–ª–µ–º\.
                   
 `3\.` –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:
–î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏–º–µ—é—â–∏—Ö—Å—è –≤ –±–∞–∑–µ –±–æ—Ç–∞ –ø–∞—Ä–æ–ª–µ–π –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π: *"üìÉ –í—Å–µ –ø–∞—Ä–æ–ª–∏"* –≤ –º–µ–Ω—é\. –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –≤–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤\.
                   
üòä –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\!
""", reply_markup=keyboard.markupbackandpass, parse_mode='MarkdownV2')


def add_pass(message):
  with open('icons/add.png', 'rb') as add:
    bot.delete_message(message.chat.id, message.message_id)
    bot.send_photo(message.chat.id, add, caption="""
üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `service:password`
""", reply_markup=keyboard.markupback)
    bot.register_next_step_handler(message, handle_password_entry)

def handle_password_entry(message):
  try:
    service, password = message.text.split(':', 1)
    if message.from_user.id in cryptkeylib:
      hashed_key = cryptkeylib[message.from_user.id]
      encryptedpassword, tag = crypter.encrypt(password, hashed_key)
      database.add_password(message.from_user.id, service, encryptedpassword, tag)
    else:
      database.add_password_notag(message.from_user.id, service, password)
    bot.send_message(message.chat.id, "‚úÖ –ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
  except ValueError:
    bot.send_message(message.chat.id, "‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç `service:password`\.", reply_markup=keyboard.markupmenu, parse_mode='MarkdownV2')
  except Exception as e:
    bot.send_message(message.chat.id, f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard.markupmenu)

def pass_list(message, userid):
  bot.delete_message(message.chat.id, message.message_id)
  services_string = database.get_list_of_services(userid)
  if services_string != '':
    with open('icons/list.png', 'rb') as list:
      bot.send_photo(message.chat.id, list, caption=f"""
  üìÑ –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤:\n<pre><code>{services_string}</code></pre>
  """, reply_markup=keyboard.markupbacklist, parse_mode='HTML')
  else:
    bot.send_message(message.chat.id, '‚ùó –ü–∞—Ä–æ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!', reply_markup=keyboard.markupmenu)

def remove_service_message(message):
  bot.delete_message(message.chat.id, message.message_id)
  bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å", reply_markup=keyboard.markupmenu)
  bot.register_next_step_handler(message, remove_service_agree)

def remove_service_agree(message):
  bot.delete_message(message.chat.id, message.message_id-1)
  bot.send_message(message.chat.id, f"üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å `{message.text}`?\n –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ\.", reply_markup=keyboard.markupremoveservice, parse_mode='MarkdownV2')

def get_password(message):
  bot.delete_message(message.chat.id, message.message_id)
  with open('icons/get.png', 'rb') as get:
    bot.send_photo(message.chat.id, get, caption="""
üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Å–µ—Ä–≤–∏—Å –∏–ª–∏ –∫–ª—é—á –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã –¥–æ–±–∞–≤–ª—è–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –ø–∞—Ä–æ–ª—å
""", reply_markup=keyboard.markupback, parse_mode='MarkdownV2')
    bot.register_next_step_handler(message, handle_password_get)

def handle_password_get(message):
  try:
    password = database.get_password(message.from_user.id, message.text)
    if len(password) != 0:
      pass_text = password[0]
      if message.from_user.id in cryptkeylib:
        hashed_key = cryptkeylib[message.from_user.id]
        decryptedpassword = crypter.decrypt(pass_text[0], hashed_key, pass_text[1])
        bot.send_message(message.chat.id, f'üîê –í–∞—à –ø–∞—Ä–æ–ª—å: ```{decryptedpassword}```', parse_mode='MarkdownV2')
      else:
        bot.send_message(message.chat.id, f'üîê –í–∞—à –ø–∞—Ä–æ–ª—å: ```{pass_text[0]}```', parse_mode='MarkdownV2')
    else:
      bot.send_message(message.chat.id, f'‚ùó –ü–∞—Ä–æ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', reply_markup=keyboard.markupmenu, parse_mode='MarkdownV2')
  except Exception as e:
    bot.send_message(message.chat.id, f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard.markupmenu)

def key_menu(message, user_id):
  bot.delete_message(message.chat.id,message.message_id)
  if user_id in cryptkeylib:
    with open('icons/crypt.png', 'rb') as crypt:
      bot.send_photo(message.chat.id, crypt, caption=f"""
üôà <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π</b>
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –≤–∞—à–∏–º –ø–∞—Ä–æ–ª—è–º.
> –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: <b>{cryptkeylib[user_id]}</b>
  """, reply_markup=keyboard.markupkeymenu, parse_mode='HTML')
  else:
    with open('icons/crypt.png', 'rb') as crypt:
      bot.send_photo(message.chat.id, crypt, caption=f"""
üôà <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª–µ–π</b>
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, –Ω–æ –æ–Ω–∞ –ø–æ–º–æ–∂–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∑–∞—â–∏—Ç—É –≤–∞—à–∏–º –ø–∞—Ä–æ–ª—è–º.
> –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: <b>–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</b>
  """, reply_markup=keyboard.markupkeymenu, parse_mode='HTML')

def add_key(message):
  bot.delete_message(message.chat.id,message.message_id)
  bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", reply_markup=keyboard.markuptokeymenu)
  bot.register_next_step_handler(message, handle_add_key)

def handle_add_key(message):
  try:
    encryptedkey = crypter.hash_key(message.text)
    cryptkeylib[message.from_user.id] = encryptedkey
    bot.send_message(message.chat.id, '‚úÖ –ö–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!', reply_markup=keyboard.markupmenu)
    bot.delete_message(message.chat.id, message.message_id-1)
  except Exception as e:
    bot.send_message(message.chat.id, f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", reply_markup=keyboard.markuptokeymenu)

def remove_key_message(message):
  bot.send_message(message.chat.id, "üßê –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è?\n –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.", reply_markup=keyboard.markupremovekey)
  bot.delete_message(message.chat.id, message.message_id)

def remove_key(user_id):
  del cryptkeylib[user_id]

def edit_key(message):
  bot.send_message(message.chat.id, "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è", reply_markup=keyboard.markuptokeymenu)
  bot.register_next_step_handler(message, handle_add_key)

@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
  data = call.data
  userid = call.from_user.id
  if data == 'to_menu':
    menu(call.message)
  elif data == 'to_info':
    info(call.message)
  elif data == 'add_pass':
    add_pass(call.message)
  elif data == 'pass_list':
    pass_list(call.message, userid)
  elif data == 'get_pass':
    get_password(call.message)
  elif data == 'to_key':
    key_menu(call.message, userid)
  elif data == 'add_key':
    add_key(call.message)
  elif data == 'remove_key':
    if userid in cryptkeylib:
      remove_key_message(call.message)
    else:
      bot.delete_message(call.message.chat.id, call.message.message_id)
      bot.send_message(call.message.chat.id, '‚ùó –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!', reply_markup=keyboard.markupmenu)
  elif data == 'remove_service':
    remove_service_message(call.message)
  elif data == 'agree_to_remove_key':
    remove_key(call.message, userid)
    bot.send_message(call.message.chat.id, '‚úÖ –ö–ª—é—á —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω!', reply_markup=keyboard.markupmenu)
    bot.delete_message(call.message.chat.id, call.message.message_id)
  elif data == 'agree_to_remove_service':
    text = call.message.text[33:]
    ind = text.find('\n')
    text = text[:ind-1]
    database.remove_service(userid, text)
    bot.send_message(call.message.chat.id, '‚úÖ –°–µ—Ä–≤–∏—Å —É–¥–∞–ª–µ–Ω!', reply_markup=keyboard.markupmenu)
    bot.delete_message(call.message.chat.id, call.message.message_id)
  elif data == 'edit_key':
    edit_key(call.message)

database.open_connection()
bot.polling()